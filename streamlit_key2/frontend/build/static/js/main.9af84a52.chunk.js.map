{"version":3,"sources":["index.tsx"],"names":["button","document","body","appendChild","createElement","textContent","inputPane","getElementById","buffers","before","Date","getTime","addEventListener","e","now","diff","key","push","console","log","isFocused","onclick","data","join","Streamlit","setComponentValue","value","onfocus","onblur","events","RENDER_EVENT","event","detail","theme","borderStyling","style","border","outline","disabled","text","args","setFrameHeight","setComponentReady"],"mappings":"6KAAA,kBAMMA,EAFOC,SAASC,KAAKC,YAAYF,SAASG,cAAc,SAE1CD,YAAYF,SAASG,cAAc,WACvDJ,EAAOK,YAAc,qBAErB,IAAMC,EAAYL,SAASM,eAAe,SACtCC,EAAoB,GAEpBC,GAAiB,IAAIC,MAAOC,UAEvB,OAATL,QAAS,IAATA,KAAWM,iBAAiB,WAAW,SAACC,GACtC,IAAIC,GAAM,IAAIJ,MAAOC,UACjBI,EAAOD,EAAML,EACJ,MAAVI,EAAEG,IACDR,EAAQS,KAAK,GAAD,OAAIF,EAAI,WAGpBP,EAAQS,KAAK,GAAD,OAAIF,EAAI,YAAIF,EAAEG,MAE9BP,EAASK,EACTI,QAAQC,IAAI,YAAD,OAAaX,OAK1B,IAAIY,GAAY,EAEhBpB,EAAOqB,QAAU,WAiBf,IAAIC,EAAOd,EAAQe,KAAK,KACxBf,EAAU,GACVgB,IAAUC,kBAAkB,GAAD,OAAIH,IAC/BhB,EAAUoB,MAAQ,IAGpB1B,EAAO2B,QAAU,WACfP,GAAY,GAGdpB,EAAO4B,OAAS,WACdR,GAAY,GA8CdI,IAAUK,OAAOjB,iBAAiBY,IAAUM,cAtC5C,SAAkBC,GAEhB,IAAMT,EAAQS,EAAkCC,OAIhD,GAAIV,EAAKW,MAAO,CAGd,IAAMC,EAAa,wBACjBd,EAAY,kBAAoB,OAAM,KAExCpB,EAAOmC,MAAMC,OAASF,EACtBlC,EAAOmC,MAAME,QAAUH,EAIzBlC,EAAOsC,SAAWhB,EAAKgB,SAIvB,IAAIC,EAAOjB,EAAKkB,KAAW,KACxBD,IACkBtC,SAASM,eAAe,UAChCmB,MAAQa,GAUrBf,IAAUiB,oBAQZjB,IAAUkB,oBAIVlB,IAAUiB,mB","file":"static/js/main.9af84a52.chunk.js","sourcesContent":["import { Streamlit, RenderData } from \"streamlit-component-lib\"\n\n// Add text and a button to the DOM. (You could also add these directly\n// to index.html.)\nconst span = document.body.appendChild(document.createElement(\"span\"))\n// const textNode = span.appendChild(document.createTextNode(\"\"))\nconst button = span.appendChild(document.createElement(\"button\"))\nbutton.textContent = \"ワハハ\"\n\nconst inputPane = document.getElementById('input') as HTMLTextAreaElement;\nlet buffers: string[] = [];\n\nlet before: number = new Date().getTime();\n\ninputPane?.addEventListener('keydown', (e) => {\n  let now = new Date().getTime();\n  let diff = now - before;\n  if(e.key === ' ') {\n      buffers.push(`${diff} SPACE`);\n  }\n  else {\n      buffers.push(`${diff} ${e.key}`);\n  }\n  before = now;\n  console.log(`buffers :${buffers}`);\n});\n\n// Add a click handler to our button. It will send data back to Streamlit.\n// let numClicks = 0\nlet isFocused = false\n\nbutton.onclick = function(): void {\n  // Increment numClicks, and pass the new value back to\n  // Streamlit via `Streamlit.setComponentValue`.\n  // let expValue = '0';\n  // let expRadio = document.getElementsByName('exp') as NodeListOf<HTMLInputElement>;\n  // for (let i = 0; i < expRadio.length; i++){\n  //   if (expRadio.item(i).checked){\n  //     expValue = expRadio.item(i).value;\n  //   }\n  // }\n  // let pythonValue = '0';\n  // let pythonRadio = document.getElementsByName('python') as NodeListOf<HTMLInputElement>;\n  // for (let i = 0; i < pythonRadio.length; i++) {\n  //   if (pythonRadio.item(i).checked) {\n  //     pythonValue = expRadio.item(i).value;\n  //   }\n  // }\n  let data = buffers.join(' ');\n  buffers = [];\n  Streamlit.setComponentValue(`${data}`);\n  inputPane.value = '';  \n}\n\nbutton.onfocus = function(): void {\n  isFocused = true\n}\n\nbutton.onblur = function(): void {\n  isFocused = false\n}\n\n/**\n * The component's render function. This will be called immediately after\n * the component is initially loaded, and then again every time the\n * component gets new data from Python.\n */\nfunction onRender(event: Event): void {\n  // Get the RenderData from the event\n  const data = (event as CustomEvent<RenderData>).detail\n\n  // Maintain compatibility with older versions of Streamlit that don't send\n  // a theme object.\n  if (data.theme) {\n    // Use CSS vars to style our button border. Alternatively, the theme style\n    // is defined in the data.theme object.\n    const borderStyling = `1px solid var(${\n      isFocused ? \"--primary-color\" : \"blue\"\n    })`\n    button.style.border = borderStyling\n    button.style.outline = borderStyling\n  }\n\n  // Disable our button if necessary.\n  button.disabled = data.disabled\n\n  // RenderData.args is the JSON dictionary of arguments sent from the\n  // Python script.\n  let text = data.args[\"name\"]\n  if(text) {\n    const outputPane = document.getElementById('output') as HTMLTextAreaElement;\n    outputPane.value = text;\n  }\n\n  // Show \"Hello, name!\" with a non-breaking space afterwards.\n  //textNode.textContent = `Hello, ${name}! ` + String.fromCharCode(160)\n\n  // We tell Streamlit to update our frameHeight after each render event, in\n  // case it has changed. (This isn't strictly necessary for the example\n  // because our height stays fixed, but this is a low-cost function, so\n  // there's no harm in doing it redundantly.)\n  Streamlit.setFrameHeight()\n}\n\n// Attach our `onRender` handler to Streamlit's render event.\nStreamlit.events.addEventListener(Streamlit.RENDER_EVENT, onRender)\n\n// Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\nStreamlit.setComponentReady()\n\n// Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\nStreamlit.setFrameHeight()\n"],"sourceRoot":""}